---
layout: post
title:  "Running PHP from bytecode - Using HHVM"
date:   2014-11-21 13:18:27
categories: story user
tags: hhvm, laravel, puppet, vagrant, ubuntu
author: yalcin
description: "Running a PHP from byte code, using HHVM"
share: true
---


_This is the first of series in which we describe how we managed to get our core technology to run as byte code instead of actual php.  This first installment in the sequence gives our motivate and highlights of how we accomplished this feat.  For detail guides and tips see the following installments in the series, we'll do our best to help others to set this up._

Here at topLog our core technology is written in numerous languages, major parts of which is are in PHP, including components of the engine as well as the front end (Laravel, a framework that has been more then up to the challenge).  With the majority of our key technology being in PHP, naturally we wanted to dig into what HHVM could do for us.  We suspected two things; first, that it would potentially give us a speed boost "for free", secondly, maybe we can use it to save our core technology as byte code and use it for distribution to our on premise deployments instead of actual php code.  As the lead developed in this project, I came across some challenges that led me to write this article, the goal being to not only share what we learnt, but also to help anyone else who wants to do the same.

<!-- I'm not sure if the voice should be "we" or "I"  I think when talking about toplog, it is we, then when talking  about how Yalcin, the author, overcame issues and did things, it should be I-->

Some of the first issues we  encountered ranged from how to make Laravel work using HHVM including virtualhost settings (we are deployed with Apache), setting up fastCGI, compiling the backend engine to bytecode, and finally running it the engine directly from the bytecode without requiring the source files at all.  The complete end model looks like the bellow diagram (roughly)

<!-- Insert a picture of the entire end model -->

I'll do my best to take you through each step of how we accomplished everything, including a brief introduction to HHVM. There isn't anything new or revolutionary in this blog. I just put together all the useful and up-to-date information I came across while experimenting with HHVM for convenience. All the resources I used can be found at the end of the post.
 
 
####**A Little Background on HHVM**
[HHVM](http://hhvm.com/) is an open-source virtual machine developed by Facebook for executing programs in PHP and their own programming language Hack. HHVM compiles PHP into an intermediate bytecode, then translates it into x64 machine code dynamically at runtime using a just-in-time compiler.

<!-- ->>Put diagram here -->

<!-- explain the diagram a little  -->


A common implementation of JIT compilation is to first have AOT (Ahead of Time) compilation to bytecode (virtual machine code), known as bytecode compilation, and then have JIT compilation to machine code (dynamic compilation), rather than interpretation of the bytecode - put this where appropriate

####**Installing HHVM using Vagrant Box - Ubuntu 12.04**
This is a very straightforward and inelegant way to install hhvm but it works if you just want to try outg the hhvm in a quick and dirty way. Here I am using the prebuilt package for Ubuntu 12.04 . You can just put this code in your Vagrantfile within configuration. For different prebuilt packages of Ubuntu or different Linux distro's you can [check out this link](https://github.com/facebook/hhvm/wiki/Prebuilt%20Packages%20for%20HHVM) and modify the code snippet for your Vagrantfile accordingly.

		config.vm.provision "shell", inline: <<-shell
			sudo apt-get update
			sudo apt-get install -y software-properties-common python-software-properties --fix-missing
			sudo apt-get update
			sudo add-apt-repository -y ppa:mapnik/boost
			sudo apt-get update
			sudo apt-get install -y libboost1.49-dev libboost-regex1.49-dev \
			  libboost-system1.49-dev libboost-program-options1.49-dev \
			  libboost-filesystem1.49-dev libboost-thread1.49-dev
			wget -O - http://dl.hhvm.com/conf/hhvm.gpg.key | sudo apt-key add -
			echo deb http://dl.hhvm.com/ubuntu precise main | sudo tee /etc/apt/sources.list.d/hhvm.list
			sudo apt-get update
			sudo apt-get install -y hhvm
  		shell

After our box is up running, here is the first thing to do to see if HHVM was installed correctly:
	
	$ hhvm --version

You can run php files just  like the original PHP itself. You can create a hello world php file and run it using the command:
		
	$ hhvm helloWorld.php
	
There are also couple of useful stuff:

If you want to start hhvm on boot:

	$ sudo update-rc.d hhvm defaults

If you want to override php cli:

	$ sudo /usr/bin/update-alternatives --install /usr/bin/php php /usr/bin/hhvm 60

To restart hhvm:
 
	$ sudo /etc/init.d/hhvm restart


####**Puppet**
If you are using puppet to deploy your vagrant-managed virtual machines,
there are a few repos that include hhvm that you can potentially learn from:

https://github.com/adyromantika/vagrant-hhvm
https://github.com/craigcarnell/puppet-hhvm

Also [PuPHPet](https://puphpet.com/) is a pretty cool website that gives you a GUI to set up a virtual machine from scratch. (with HHVM too, of course)


####**Compiling the backend**

We have a file called php.list that contains the paths and names of the php files we want to compile into bytecode.

in /opt/toplog/toplog.main , run this command

    hhvm --hphp -thhbc -o /path/to/hhvm.hhbc --input-list /path/to/php.list

This command will compile the php files into bytecode and store it in a database created in the folder specified. In this case, we should have /path/to/database/hhvm.hhbc 

####**Configuration**

After our box is up and our code is compiled, we need to create a configuration file config.hdf in /etc/hhvm/ folder and paste this to be able to run your code straight from the bytecode:

	Repo {
	  Authoritative = true
	  Central {
	    Path = /path/to/hhvm.hhbc
	  }
	}

[Check here](https://github.com/facebook/hhvm/wiki/Runtime-options) for the rest of the configurations.

If you encounter the error below, it is very likely that your repo does not have the right permissions. Make sure it has the correct user:group setting and permissions.

	Failed to initialize central HHBC repository at '/path/to/hhvm.hhbc'


